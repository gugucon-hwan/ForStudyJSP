/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.26
 * Generated at: 2020-08-22 18:31:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch13;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.SimpleDateFormat;
import ch13.board.BoardDBBean;
import ch13.board.BoardDataBean;
import java.util.List;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    	int pageSize=10;
    	SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm");
    
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/ch13/color.jspf", Long.valueOf(1598111902189L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("ch13.board.BoardDBBean");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("ch13.board.BoardDataBean");
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

   String bodyback_c="#FFF0B5";
   String value_c="#FFE271";

      out.write("    \r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");

    	String pageNum=request.getParameter("pageNum");
    	if(pageNum==null){
    		pageNum="1";
    	}
    	
    	int currentPage=Integer.parseInt(pageNum);
    	int startRow=(currentPage-1)*pageSize+1;
    	int endRow=currentPage*pageSize;
    	int count=0;
    	int number=0;
    	List<BoardDataBean>articleList=null;
    	
    	BoardDBBean dbPro=BoardDBBean.getInstance();
    	count=dbPro.getArticleCount();
    	if(count>0){
    		articleList=dbPro.getArticle(startRow, pageSize);
    	}
    	
    	number=count-(currentPage-1)*pageSize;
    	
    	
    
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>게시판</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body bgcolor=\"");
      out.print(bodyback_c);
      out.write("\">\r\n");
      out.write("\t<p>글목록(전체 글:");
      out.print(count );
      out.write(")</p>\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td align=\"right\" bgcolor=\"");
      out.print(value_c );
      out.write("\">\r\n");
      out.write("\t\t\t\t<a href=\"writeForm.jsp\">글쓰기</a>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t");
if(count==0) {
      out.write("\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td align=\"center\">\r\n");
      out.write("\t\t\t\t게시판에 저장된 글이 없습니다.\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t");
} else { 
      out.write("\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t<tr height=\"30\" bgcolor=\"");
      out.print(value_c );
      out.write("\">\r\n");
      out.write("\t\t\t<td align=\"center\" width=\"50\">번 호</td>\r\n");
      out.write("\t\t\t<td align=\"center\" width=\"250\">제 목</td>\r\n");
      out.write("\t\t\t<td align=\"center\" width=\"100\">작성자</td>\r\n");
      out.write("\t\t\t<td align=\"center\" width=\"150\">작성일</td>\r\n");
      out.write("\t\t\t<td align=\"center\" width=\"50\">조 회</td>\r\n");
      out.write("\t\t\t<td align=\"center\" width=\"100\">IP</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t");

		for(int i=0;i<articleList.size();i++){
			BoardDataBean article=articleList.get(i);			

	
      out.write("\r\n");
      out.write("\t<tr height=\"30\">\r\n");
      out.write("\t\t<td width=\"50\">");
      out.print(number );
      out.write("</td>\r\n");
      out.write("\t\t<td width=\"250\" align=\"left\">\r\n");
      out.write("\t");

		int wid=0;
		if(article.getRe_level()>0){
			wid=5*(article.getRe_level());		
	
      out.write("\r\n");
      out.write("\t<img src=\"images/level.png\" width=\"");
      out.print(wid );
      out.write("\" height=\"16\">\r\n");
      out.write("\t<img src=\"images/re.png\">\r\n");
      out.write("\t");
}else{ 
      out.write("\r\n");
      out.write("\t\t<img src=\"images/level.png\" width=\"");
      out.print(wid );
      out.write("\" height=\"16\">\r\n");
      out.write("\t");
} 
      out.write("\r\n");
      out.write("\t<a href=\"content.jsp?num=");
      out.print(article.getNum());
      out.write("&pageNum=");
      out.print(currentPage );
      out.write("\">\r\n");
      out.write("\t\t");
      out.print(article.getSubject() );
      out.write("\r\n");
      out.write("\t</a>\r\n");
      out.write("\t");
if(article.getReadcount()>=20){ 
      out.write("\r\n");
      out.write("\t\t<img src=\"images/hot.gif\" border=\"0\" height=\"16\"> ");
 } 
      out.write("</td>\r\n");
      out.write("\t<td width=\"100\" align=\"left\">\r\n");
      out.write("\t\t<a href=\"mailto:");
      out.print(article.getEmail() );
      out.write('"');
      out.write('>');
      out.print(article.getWriter() );
      out.write("</a>\r\n");
      out.write("\t</td>\r\n");
      out.write("\t<td width=\"150\">");
      out.print(sdf.format(article.getReg_date()) );
      out.write("</td>\r\n");
      out.write("\t<td width=\"50\">");
      out.print(article.getReadcount() );
      out.write("</td>\r\n");
      out.write("\t<td width=\"100\">");
      out.print(article.getIp() );
      out.write("</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t");
} 
      out.write("\t\t\r\n");
      out.write("\t</table>\r\n");
      out.write("\t");

		if(count>0){
			int pageCount=count/pageSize+(count%pageSize==0?0:1);
			int startPage=1;
			
			if(currentPage%10!=0)
				startPage=(int)(currentPage/10)*10+1;
			else
				startPage=((int)(currentPage/10)-1)*10+1;
			int pageBlock =10;
			int endPage=startPage+pageBlock-1;
			if(endPage>pageCount)endPage=pageCount;
			if(startPage>10){
      out.write("\r\n");
      out.write("\t\t\t\t<a href=\"list.jsp?pageNum=");
      out.print(startPage-10 );
      out.write("\">[이전]</a>\r\n");
      out.write("\t\t\t");
 }
			for (int i=startPage;i<=endPage;i++){
      out.write("\r\n");
      out.write("\t\t\t<a href=\"list.jsp?pageNum=");
      out.print(i );
      out.write('"');
      out.write('>');
      out.write('[');
      out.print(i );
      out.write("]</a>\r\n");
      out.write("\t\t\t");
}
			
				if(endPage<pageCount) {
      out.write("\r\n");
      out.write("\t\t\t\t<a href=\"list.jsp?pageNum");
      out.print(startPage+10 );
      out.write("\">[다음]</a>\r\n");
      out.write("\t\t\t");

				}
				
		}
	}
			
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
