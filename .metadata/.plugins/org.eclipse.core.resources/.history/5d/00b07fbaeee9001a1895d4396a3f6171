package ch14.bookshop.master;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;


/**
  * @FileName : ShopBookDBBean.java
  * @Project : StudyBasicJSP
  * @Date : 2020. 8. 26 
  * @작성자 : gugucon
  * @변경이력 :
  * @프로그램 설명 : 
  */
public class ShopBookDBBean {
	private static ShopBookDBBean instance = new ShopBookDBBean();

	public static ShopBookDBBean getInstance() {
		return instance;
	}//getInstance

	private ShopBookDBBean() {}
	
	/**
	  * @Method Name : getConnection
	  * @작성일 : 2020. 8. 26
	  * @작성자 : gugucon
	  * @변경이력 : 
	  * @Method 설명 : 커넥션풀로부터 커넥션관계를 얻어내는 메소드
	  * @return
	  * @throws Exception
	  */
	private Connection getConnection() throws Exception{
		Context initCtx=new InitialContext();
		Context envCtx=(Context)initCtx.lookup("java:comp/env");
		DataSource ds=(DataSource)envCtx.lookup("jdbc/basic.jsp");
		return ds.getConnection();
	}//getConnection
	/**
	  * @Method Name : managerCheck
	  * @작성일 : 2020. 8. 26
	  * @작성자 : gugucon
	  * @변경이력 : 
	  * @Method 설명 : 관리자 인증 메소드
	  * @param id
	  * @param passwd
	  * @return
	  * @throws Exception
	  */
	public int managerCheck(String id, String passwd) throws Exception{
		Connection conn=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		String dbpasswd="";
		int x=-1;
		try {
			conn=getConnection();
			pstmt=conn.prepareStatement("select managerPasswd from manager where managerId=?");
		}catch (Exception ex) {
			// TODO: handle exception
			ex.printStackTrace();
		}finally {
			if(rs!=null)				
					// TODO: handle exception
				try {rs.close();}catch (SQLException ex) {}
			if(pstmt!=null)
				try {pstmt.close();}catch (SQLException ex) {}
			if(conn!=null)
				try {conn.close();}catch (SQLException ex) {}
			}
		return x;
	}//managerCheck	
	
	/**
	  * @Method Name : insertBook
	  * @작성일 : 2020. 8. 26
	  * @작성자 : gugucon
	  * @변경이력 : 
	  * @Method 설명 : 책 등록 메소드
	  * @param book
	  * @throws Exception
	  */
	public void insertBook(ShopBookDataBean book) throws Exception{
		Connection conn=null;
		PreparedStatement pstmt=null;
		
		try {
			conn=getConnection();
			pstmt=conn.prepareStatement("insert into book values (?,?,?,?,?,?,?,?,?,?,?,?)");
			pstmt.setInt(1, book.getBook_id());
			pstmt.setString(2, book.getBook_title());
			pstmt.setString(3, book.getBook_title());
			pstmt.setInt(4, book.getBook_price());
			pstmt.setShort(5, book.getBook_count());
			pstmt.setString(6, book.getAuthor());
			pstmt.setString(7, book.getPublishing_com());
			pstmt.setString(8, book.getPublishing_date());
			pstmt.setString(9, book.getBook_image());
			pstmt.setString(10, book.getBook_content());
			pstmt.setByte(11, book.getDiscount_rate());
			pstmt.setTimestamp(12, book.getReg_date());
		}catch (Exception ex) {
			// TODO: handle exception
			ex.printStackTrace();
		}finally {
			if(pstmt!=null)
				try {pstmt.close();}catch(SQLException ex) {}
			if(conn!=null)
				try {conn.close();}catch (SQLException e) {}
		}
	}//insertBook
	
	/**
	  * @Method Name : getBookCount
	  * @작성일 : 2020. 8. 26
	  * @작성자 : gugucon
	  * @변경이력 : 
	  * @Method 설명 : 책 등록 메소드
	  * @return
	  * @throws Exception
	  */
	public int getBookCount() throws Exception{
		Connection conn=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		
		int x=0;
		
		try {
			conn=getConnection();
			pstmt=conn.prepareStatement("select count(*) from book");
			rs=pstmt.executeQuery();
			
			if(rs.next())
				x=rs.getInt(1);
		}catch (Exception ex) {
			// TODO: handle exception
			ex.printStackTrace();
		}finally {
		if(rs!=null)
			try {rs.close();}catch (SQLException ex) {}
		if(pstmt!=null)
			try {pstmt.close();}catch (SQLException ex) {}
		if(conn!=null)
			try {conn.close();}catch (SQLException ex) {}
		}
		return x;
	}
	
	/**
	  * @Method Name : getBooks
	  * @작성일 : 2020. 8. 26
	  * @작성자 : gugucon
	  * @변경이력 : 
	  * @Method 설명 : 분류별 또는 전체등록된 책의 정보를 얻어내는 메소드
	  * @param book_kind
	  * @return
	  * @throws Exception
	  */
	public List<ShopBookDataBean> getBooks(String book_kind) throws Exception{
		Connection conn=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		List<ShopBookDataBean> bookList=null;
		
		try {
			conn=getConnection();
			String sql1="select * from book";
			String sql2="select * from book";
			sql2+="where book_kind=? order by reg_date desc";
			
			if(book_kind.equals("all")) {
				pstmt=conn.prepareStatement(sql1);
			}else {
				pstmt=conn.prepareStatement(sql2);
				pstmt.setString(1, book_kind);
			}
			rs=pstmt.executeQuery();
			if(rs.next()) {
				bookList=new ArrayList<ShopBookDataBean>();
				do {
					ShopBookDataBean book=new ShopBookDataBean();
					
					book.setBook_id(rs.getInt("book_id"));
					book.setBook_kind(rs.getString("book_kind"));
					book.setBook_title(rs.getString("book_title"));
					book.setBook_price(rs.getInt("book_price"));
					book.setBook_count(rs.getShort("book_count"));
					book.setAuthor(rs.getString("author"));
					book.setPublishing_com(rs.getString("publishing_com"));
					book.setPublishing_date(rs.getString("publishing_date"));
					book.setBook_image(rs.getString("book_image"));
					book.setDiscount_rate(rs.getByte("discount_rate"));
					book.setReg_date(rs.getTimestamp("reg_date"));
					
					bookList.add(book);
				}while(rs.next());
			}
		}catch (Exception ex) {
			ex.printStackTrace();
		}finally {
			if(rs!=null)
				try {rs.close();}catch (SQLException ex) {}
			if(pstmt!=null)
				try {pstmt.close();}catch (SQLException ex) {}
			if(conn!=null)
				try {conn.close();}catch (SQLException ex) {}
		}
		return bookList;
	}	
	
	/**
	  * @Method Name : getBooks
	  * @작성일 : 2020. 8. 26
	  * @작성자 : gugucon
	  * @변경이력 : 
	  * @Method 설명 : 쇼핑몰 메인에 표시하기 위해서 사용하는 분류별 신간책목록을 얻어내는 메소드
	  * @param book_kind
	  * @param count
	  * @return
	  * @throws Exception
	  */
	public ShopBookDataBean[] getBooks(String book_kind, int count) throws Exception{
		Connection conn=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		ShopBookDataBean bookList[]=null;
		int i=0;
		
		try {
			conn=getConnection();
			String sql="select * from book where book_kind=? ";
			sql+="order by reg_date desc limit ?,?";
			
			pstmt=conn.prepareStatement(sql);
			pstmt.setString(1, book_kind);
			pstmt.setInt(2, 0);
			pstmt.setInt(3, count);
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				bookList=new ShopBookDataBean[count];
				do {
					ShopBookDataBean book= new ShopBookDataBean();
					book.setBook_id(rs.getInt("book_id"));
					book.setBook_kind(rs.getString("book_kind"));
					book.setBook_title(rs.getString("book_title"));
					book.setBook_price(rs.getInt("book_price"));
					book.setBook_count(rs.getShort("book_count"));
					book.setAuthor(rs.getString("author"));
					book.setPublishing_com(rs.getString("publishing_com"));
					book.setPublishing_date(rs.getString("publishing_date"));
					book.setBook_image(rs.getString("book_image"));
					book.setDiscount_rate(rs.getByte("discount_rate"));
					book.setReg_date(rs.getTimestamp("reg_date"));
					
					bookList[i]=book;
					i++;
				}while(rs.next());
			}
		}catch (Exception ex) {
			ex.printStackTrace();
		}finally {
			if(rs!=null)
				try {rs.close();}catch (SQLException ex) {}
			if(pstmt!=null)
				try {pstmt.close();}catch (SQLException ex) {}
			if(conn!=null)
				try {conn.close();}catch (SQLException ex) {}
		}
		return bookList;
	}//getBooks
	
	/**
	  * @Method Name : getBook
	  * @작성일 : 2020. 8. 26
	  * @작성자 : gugucon
	  * @변경이력 : 
	  * @Method 설명 : bookId에 해당하는 책의 정보를 얻어내는 메소드로
	  * 등록된 책을 수정하기 위해 수정폼으로 읽어들이기 위한 메소드
	  * @param bookId
	  * @return
	  * @throws Exception
	  */
	public ShopBookDataBean getBook(int bookId) throws Exception{
		Connection conn=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		
		ShopBookDataBean book=null;
		
		try {
			conn=getConnection();
			pstmt=conn.prepareStatement("select * from book where book_id=?");
			pstmt.setInt(1, bookId);
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				book=new ShopBookDataBean();
				
				book.setBook_kind(rs.getString("book_kind"));
				book.setBook_title(rs.getString("book_title"));
				book.setBook_price(rs.getInt("book_price"));
				book.setBook_count(rs.getShort("book_count"));
				book.setAuthor(rs.getString("author"));
				book.setPublishing_com(rs.getString("publishing_com"));
				book.setPublishing_date(rs.getString("publishing_date"));
				book.setBook_image(rs.getString("book_image"));
				book.setBook_content(rs.getString("book_content"));
				book.setDiscount_rate(rs.getByte("discount_rate"));
			}
		}catch (Exception ex) {
			ex.printStackTrace();
		}finally {
			if(rs!=null)
				try {rs.close();}catch (SQLException ex) {}
			if(pstmt!=null)
				try {pstmt.close();}catch (SQLException ex) {}
			if(conn!=null)
				try {conn.close();}catch (SQLException ex) {}
		}
		return book;		
	}
	
	/**
	  * @Method Name : deleteBook
	  * @작성일 : 2020. 8. 26
	  * @작성자 : gugucon
	  * @변경이력 : 
	  * @Method 설명 : bookId에 해당하는 책의 정보를 삭제시 사용하는 메소드
	  * @param bookId
	  * @throws Exception
	  */
	public void deleteBook(int bookId) throws Exception{
		Connection conn=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		
		try {
			conn=getConnection();
			pstmt=conn.prepareStatement("delete from book where book_id=?");
			pstmt.setInt(1, bookId);
			pstmt.executeUpdate();
		}catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			if(rs!=null)
				try {rs.close();}catch (SQLException ex) {}
			if(pstmt!=null)
				try {pstmt.close();}catch (SQLException ex) {}
			if(conn!=null)
				try {conn.close();}catch (SQLException ex) {}
		}
	}
}